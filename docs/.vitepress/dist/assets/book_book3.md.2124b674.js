import{_ as e,o as i,c as l,a as t}from"./app.b30708dd.js";const S=JSON.parse('{"title":"nuxt知识","description":"","frontmatter":{},"headers":[{"level":2,"title":"nuxt 是什么","slug":"nuxt-是什么","link":"#nuxt-是什么","children":[]},{"level":2,"title":"nuxt特性","slug":"nuxt特性","link":"#nuxt特性","children":[]},{"level":2,"title":"优点","slug":"优点","link":"#优点","children":[]}],"relativePath":"book/book3.md"}'),a={name:"book/book3.md"},n=t('<h1 id="nuxt知识" tabindex="-1">nuxt知识 <a class="header-anchor" href="#nuxt知识" aria-hidden="true">#</a></h1><h2 id="nuxt-是什么" tabindex="-1">nuxt 是什么 <a class="header-anchor" href="#nuxt-是什么" aria-hidden="true">#</a></h2><ul><li>Nuxt.js 是一个基于 Vue.js 的通用应用框架。</li><li>通过对客户端/服务端基础架构的抽象组织，Nuxt.js 主要关注的是应用的 UI 渲染。</li><li>就使用而言,组件写法基本和vue相差不大,区别在于几个钩子函数,以及一些服务端渲染相关的东西</li></ul><h2 id="nuxt特性" tabindex="-1">nuxt特性 <a class="header-anchor" href="#nuxt特性" aria-hidden="true">#</a></h2><ul><li>基于 Vue.js</li><li>自动代码分层</li><li>服务端渲染</li><li>强大的路由功能，支持异步数据</li><li>静态文件服务</li><li>ES2015+ 语法支持</li><li>打包和压缩 JS 和 CSS</li><li>HTML 头部标签管理</li><li>支持各种样式预处理器： SASS、LESS、 Stylus 等等</li></ul><h2 id="优点" tabindex="-1">优点 <a class="header-anchor" href="#优点" aria-hidden="true">#</a></h2><ul><li>利于seo,一般购物类网站都需要seo优化</li><li>首屏渲染速度更快</li><li>原因是:服务端渲染只需要进行一次网络请求,而客户端渲染需要先请求运行所需文件,运行之后再进行网络请求数据,然后 - 加载页面</li><li>缺点</li><li>对于服务器要求比客户端渲染高</li></ul>',7),r=[n];function u(s,o,d,h,c,_){return i(),l("div",null,r)}const f=e(a,[["render",u]]);export{S as __pageData,f as default};
